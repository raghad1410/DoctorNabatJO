# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vt6_L1GmZ4HMr-6k3Hk1sT6pexWay1-n
"""

import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.efficientnet import preprocess_input
from PIL import Image

# Load CSV with disease information (English + Arabic)
info_df = pd.read_csv('disease_info.csv')

# Load plant type model
plant_type_model = tf.keras.models.load_model('plant_type_model.h5')
plant_type_labels = ['Bell pepper', 'Corn', 'Grape', 'Olive', 'Potato', 'Strawberry', 'Tomato']

# Load disease models
model_paths = {
    "Bell pepper": "Bell_pepper_model.h5",
    "Corn": "Corn_model.h5",
    "Grape": "Grape_model.h5",
    "Olive": "Olive_model.h5",
    "Potato": "Potato_model.h5",
    "Strawberry": "Strawberry_model.h5",
    "Tomato": "Tomato_model.h5"
}

disease_models = {plant: tf.keras.models.load_model(path) for plant, path in model_paths.items()}

# Define disease labels based on provided list
disease_labels = {
    "Bell pepper": [
        "Bell pepper_Bell pepper_Bacterial_spot",
        "Bell pepper_Bell pepper_healthy"
    ],
    "Corn": [
        "corn_corn_Blight",
        "corn_corn_common_Rust"
    ],
    "Grape": [
        "Grapeblack rot",
        "Grapeesca (blackmeasles)",
        "Grapehealthy",
        "Grape leafeblight(isariopsisleaf spot)"
    ],
    "Olive": [
        "Olive_Olive_aculus_olearius",
        "Olive_Olive_healthy",
        "Olive_Olive_peacock_spot"
    ],
    "Potato": [
        "Potato_Potato_Early Blight",
        "Potato_Potato_healthy",
        "Potato_Potato_Late Blight"
    ],
    "Strawberry": [
        "Strawberry_Strawberry_healthy",
        "Strawberry_Strawberry_Leaf Scorch"
    ],
    "Tomato": [
        "Tomato bacterial spot",
        "Tomato early blight",
        "Tomato healthy",
        "Tomato late blight",
        "Tomato leaf mold",
        "Tomato target spot",
        "Tomato yellow leaf curl virus"
    ]
}

# Streamlit UI
st.set_page_config(page_title="Doctor Nabat Jo", layout="centered")
st.title("🌿 Doctor Nabat Jo - Plant Disease Diagnosis")

# Language selector
language = st.radio("🇸🇦 Choose Language / اختر اللغة", ["English", "Arabic"])

# Upload image
uploaded_file = st.file_uploader("Upload a plant leaf image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    img = Image.open(uploaded_file)
    st.image(img, caption="Uploaded Image", use_column_width=True)

    # Preprocess image
    resized_img = img.resize((300, 300))
    img_array = image.img_to_array(resized_img)
    processed_img = preprocess_input(np.expand_dims(img_array, axis=0))

    # Stage 1: Predict plant type
    plant_pred = plant_type_model.predict(processed_img)
    plant_index = np.argmax(plant_pred)
    plant_name = plant_type_labels[plant_index]

    st.success(f"Detected Plant Type: {plant_name}")

    # Stage 2: Predict disease
    if plant_name in disease_models:
        disease_model = disease_models[plant_name]
        disease_pred = disease_model.predict(processed_img)
        disease_index = np.argmax(disease_pred)

        disease_name = disease_labels[plant_name][disease_index] if plant_name in disease_labels else "Unknown"

        st.info(f"Predicted Disease: {disease_name}")

        # Lookup treatment from CSV
        match = info_df[(info_df['plant'] == plant_name) & (info_df['disease'] == disease_name)]

        if not match.empty:
            row = match.iloc[0]
            if language == "Arabic":
                st.write(f"🌿 **النبات**: {row['plant_ar']}")
                st.write(f"🧠 **المرض**: {row['disease_ar']}")
                st.write(f"⚠️ **الحالة**: {row['status_ar']}")
                st.write(f"💊 **العلاج المقترح**: {row['treatment_ar']}")
            else:
                st.write(f"🌿 **Plant**: {row['plant']}")
                st.write(f"🧠 **Disease**: {row['disease']}")
                st.write(f"⚠️ **Status**: {row['status']}")
                st.write(f"💊 **Suggested Treatment**: {row['treatment']}")
        else:
            st.warning("No matching disease information found in the database.")
    else:
        st.error("No disease model available for this plant type.")